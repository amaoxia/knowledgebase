<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<beans:bean id="loggerListener"
		class="org.springframework.security.authentication.event.LoggerListener" />

	<!-- 不要过滤图片等静态资源 -->
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js" security="none" />
	<http pattern="/**/*.html" security="none" />
	<http pattern="/common/*" security="none" />

	<!-- 登录页面和忘记密码页面不过滤  -->
	<http pattern="/login.jsp" security="none" />
	<http pattern="/loginout.jsp" security="none" />
	<http pattern="/forgotpassword.jsp" security="none" />
	<http auto-config='true' access-denied-page="/accessDenied.jsp"
		request-matcher="regex">
		<logout invalidate-session="true" logout-success-url="/loginout.jsp"/>

		<!-- 指定登陆页面、成功页面、失败页面-->
		<form-login login-page="/login.jsp"
			default-target-url="/index.ft"
			authentication-failure-url="/login.jsp" 
			always-use-default-target="true"/>

		<!-- 会话管理配置 ,设置最多登录一次 -->
		<session-management invalid-session-url="/timeout.jsp">
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true" />
		</session-management>
		
		<!-- 使用数据库，本地Cookies保存的是一个生成的序列号，安全性更强 -->
		<remember-me data-source-ref="dataSource"
			token-validity-seconds="604800" />
		<!-- 未登陆时，默认用户为 Guest -->
		<anonymous username="Guest" />

		<!-- 增加一个filter，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref="customSecurityInterceptor" />
	</http>

	<!-- 登陆失败X次，锁定账号 -->
	<beans:bean id="lockUserListener" class="com.bluecloud.framework.core.security.listerner.LockUserListener">
	</beans:bean>

	<!--自定义的filter-->
	<beans:bean id="customSecurityInterceptor"
		class="com.bluecloud.framework.core.security.CustomSecurityInterceptor">
		<!-- 用户拥有的权限 -->
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 -->
		<beans:property name="accessDecisionManager" ref="customAccessDecisionManager" />
		<!-- 资源与权限对应关系 -->
		<beans:property name="securityMetadataSource" ref="customSecurityMetadataSource" />
	</beans:bean>

	<!-- 注意能够为authentication-manager 设置alias别名  -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customUserDetailsService">
		</authentication-provider>
	</authentication-manager>


	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="customAccessDecisionManager" class="com.bluecloud.framework.core.security.manager.CustomAccessDecisionManager">
	</beans:bean>

	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="customSecurityMetadataSource" class="com.bluecloud.framework.core.security.manager.CustomSecurityMetadataSource">
		<beans:property name="webRealPath" value="/sysmgr" />
		<beans:constructor-arg name="securityService" ref="securityService"></beans:constructor-arg>
	</beans:bean>

	<!-- 用户详细信息管理 : 用户信息、角色信息、权限信息、用户缓存功能。  
	<beans:bean id="userDetailsService" class="com.component.sys.security.service.CustomUserDetailsService">
		<beans:property name="securityService" ref="securityService"></beans:property>
	</beans:bean>
	


	<beans:bean id="securityService" class="com.component.sys.security.service.SecurityService">
		<beans:property name="baseDao" ref="usersDao"></beans:property>
	</beans:bean>
	-->



	<!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.jsp"></beans:property>
	</beans:bean>

	<!--	 
		<beans:bean id="userCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
		<beans:property name="cache" ref="userEhCache" />
		</beans:bean> 
	-->

	<!-- 缓存用户管理
		<beans:bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" />
		
		<beans:bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<beans:property name="cacheName" value="userCache" />
		<beans:property name="cacheManager" ref="cacheManager" />
		</beans:bean>
	-->

	<!-- acl（access control list）缓存管理 
		<beans:bean id="aclCache"	class="org.springframework.security.acls.domain.EhCacheBasedAclCache">
		<constructor-arg ref="aclEhCache" />
		</beans:bean>
		
		
		<beans:bean id="aclEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
		<beans:property name="cacheManager" ref="cacheManager" />
		<beans:property name="cacheName" value="aclCache" />
		</beans:bean>
	-->
	<!--  
	<bean id="rememberMeFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">  
		<property name="rememberMeServices" ref="rememberMeServices"/>  
		<property name="authenticationManager" ref="theAuthenticationManager" />
	</bean>
	
	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">  
		<property name="userDetailsService" ref="myUserDetailsService"/>  
		<property name="key" value="springRocks"/>
	</bean>
	
	<bean id="rememberMeAuthenticationProvider" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationProvider">  
		<property name="key" value="springRocks"/>
	</bean>
	-->
</beans:beans>
